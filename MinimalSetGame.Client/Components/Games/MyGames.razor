@inject IGamesHttpRepository GamesHttpRepository
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@attribute [Authorize]

<h3>My Games</h3>

<div class="d-flex justify-content-end mb-3">
    <button class="btn btn-primary" @onclick="CreateGame">New Game</button>
</div>

<table class="table">
    <thead>
    <tr>
        <th>Id</th>
        <th>State</th>
        <th>Created At</th>
        <th>Finished At</th>
        <th>Actions</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var game in _games)
    {
        <tr>
            <td>@game.Id</td>
            <td>@game.State</td>
            <td>@game.CreatedAt</td>
            <td>@game.FinishedAt</td>
            <td>
                @if (game.FinishedAt == null)
                {
                    <button
                        class="btn btn-success"
                        @onclick="() => ContinueGame(game.Id)">
                        Continue
                    </button>
                }
            </td>
        </tr>
    }
    </tbody>
</table>

@code {
    List<GameResponse> _games = [];

    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _games = await GamesHttpRepository.GetGames();
    }

    private void ContinueGame(Guid gameId) { NavigationManager.NavigateTo($"games/{gameId}"); }

    async void CreateGame()
    {
        await HttpClient.PostAsync("api/games", new StringContent(""))
            .ContinueWith(
            async task =>
            {
                if (task.Result.IsSuccessStatusCode)
                {
                    _games = await GamesHttpRepository.GetGames();
                    StateHasChanged();
                }
            });
    }
}
