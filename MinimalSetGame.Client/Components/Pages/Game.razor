@page "/Games/{GameId:guid}"
@inject IGamesHttpRepository GamesHttpRepository
@inject ISetHttpRepository SetHttpRepository
@inject NavigationManager NavigationManager
@attribute [Authorize]

<PageTitle>Game</PageTitle>

<div class="container bg-light p-5 mb-5">
    <div class="row justify-content-center">
        @if (_gameResponse?.Deck is not null)
        {
            @foreach (var card in _gameResponse.Deck.Where(
                      c => c.IsDrawn && !
                          _gameResponse.Sets.All(s => s.Cards.Contains(c.Id))))
            {
                <div class="col-auto m-2">
                    <Card CardResponse="@card" IsSelected="@IsCardSelected(card)"
                          OnCardSelected="OnCardClick">
                    </Card>
                </div>
            }
        }
        else
        {
            <div class="card text-center">
                No cards drawn yet
            </div>
        }
    </div>
</div>

<div class="container bg-light p-5">
    <ul>
        <li>Sets: @_gameResponse?.Sets.Count</li>
    </ul>
</div>

@code {

    List<CardResponse> _selectedCards = [];

    [Parameter]
    public Guid GameId { get; set; }

    private GameResponse? _gameResponse;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _gameResponse = await GamesHttpRepository.GetGameById(GameId);

        if (_gameResponse is null)
            NavigationManager.NavigateTo("games");
    }

    private void OnCardClick(CardResponse card)
    {
        if (IsCardSelected(card))
        {
            _selectedCards.Remove(card);
        }
        else
        {
            _selectedCards.Add(card);
        }

        if (_selectedCards.Count == 3)
        {
            TryAddSet();
        }
    }

    void TryAddSet()
    {
        var request =
            new CreateSetRequest(
            GameId,
            _selectedCards.Select(c => c.Id).ToList());

        SetHttpRepository.TryCreateSet(GameId, request);

        _selectedCards.Clear();

    }

    private bool IsCardSelected(CardResponse card) { return _selectedCards.Contains(card); }
}
