@page "/Games/{GameId:guid}"
@using System.Net
@using MinimalSetGame.Client.Entities
@using Card=MinimalSetGame.Client.Entities.Card
@inject IGamesHttpRepository GamesHttpRepository
@inject ISetHttpRepository SetHttpRepository
@inject ICardsHttpRepository CardsHttpRepository
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@attribute [Authorize]

<PageTitle>Game</PageTitle>

<div class="container bg-light p-5 mb-5">
    <div class="row justify-content-center">
        @if (_gameResponse?.Deck is not null)
        {
            @foreach (var card in CardsOnTable)
            {
                <div class="col-auto m-2">
                    <Card CardResponse="@card" IsSelected="@IsCardSelected(card)"
                          OnCardSelected="OnCardClick">
                    </Card>
                </div>
            }
        }
        else
        {
            <div class="card text-center">
                No cards drawn yet
            </div>
        }
    </div>
</div>

<div class="container bg-light p-5">
    <div class="row">
        <div class="col">
            <ul>
                <li>Cards: @Deck.Count</li>
                <li>Drawn cards: @DrawnCards.Count</li>
                <li>Sets: @Sets.Count</li>
            </ul>
        </div>
        <div class="col">
            <button class="btn btn-info" @onclick="(() => DrawCards(1))">Draw card</button>
            <button class="btn btn-light" @onclick="GetHint">Get Hint</button>
        </div>
    </div>
</div>

@code {

    List<CardResponse> _selectedCards = [];

    List<CardResponse> DrawnCards => _gameResponse?.Deck.FindAll(
                                     c => c
                                         .IsDrawn) ??
                                     [];

    List<SetResponse> Sets => _gameResponse?.Sets ?? [];
    List<CardResponse> Deck => _gameResponse?.Deck ?? [];
    const int InitialAmountOfCards = 12;

    List<CardResponse> CardsOnTable => _gameResponse?.Deck.Where(
                                           c => c.IsDrawn &&
                                                !_gameResponse.Sets.Any(
                                                s => s.Cards.Contains(
                                                c
                                                    .Id)))
                                           .ToList() ??
                                       [];

    [Parameter]
    public Guid GameId { get; set; }

    private GameResponse? _gameResponse;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _gameResponse = await GamesHttpRepository.GetGameById(GameId);

        if (_gameResponse is null)
            NavigationManager.NavigateTo("games");

        var drawnCardsNotInSet =
            _gameResponse?.Deck.Where(
                c => c.IsDrawn &&
                     !_gameResponse.Sets.Any(s => s.Cards.Contains(c.Id)))
                .ToList()
                .Count ??
            0;

        if (drawnCardsNotInSet < InitialAmountOfCards)
        {
            await CardsHttpRepository.DrawCards(GameId, InitialAmountOfCards - drawnCardsNotInSet);
            _gameResponse = await GamesHttpRepository.GetGameById(GameId);
        }
    }

    private void OnCardClick(CardResponse card)
    {
        if (IsCardSelected(card))
        {
            _selectedCards.Remove(card);
        }
        else
        {
            _selectedCards.Add(card);
        }

        if (_selectedCards.Count == 3)
        {
            TryAddSet();
        }
    }

    async void TryAddSet()
    {
        var request =
            new CreateSetRequest(
            GameId,
            _selectedCards.Select(c => c.Id).ToList());

        var response = await SetHttpRepository.TryCreateSet(GameId, request);

        if (response is null)
        {
            _selectedCards.Clear();
            StateHasChanged();
            return;
        }
        else
        {
            _gameResponse = await GamesHttpRepository.GetGameById(GameId);
            if (CardsOnTable.Count < InitialAmountOfCards)
            {
                await DrawCards(InitialAmountOfCards - CardsOnTable.Count);
            }
            _selectedCards.Clear();
            _gameResponse = await GamesHttpRepository.GetGameById(GameId);
            StateHasChanged();
        }

    }

    private bool IsCardSelected(CardResponse card) { return _selectedCards.Contains(card); }

    async Task DrawCards(int amount = 1)
    {
        var response = await HttpClient.GetAsync($"api/games/{GameId}/Cards/Draw/{amount}");

        if (!response.IsSuccessStatusCode)
            return;

        _gameResponse = await GamesHttpRepository.GetGameById(GameId);

    }

    async void GetHint()
    {
        var response = await HttpClient.GetAsync($"api/games/{GameId}/Hint");

        if (!response.IsSuccessStatusCode)
            return;

        var hint = await response.Content.ReadFromJsonAsync<HintResponse>();

        _selectedCards.Clear();

        if (hint?.Cards.Count == 3)
            foreach (var card in hint.Cards)
            {
                _selectedCards.Add(card);
            }

        StateHasChanged();
    }
}
